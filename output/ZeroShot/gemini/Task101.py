import os
import stat

def create_and_make_executable(filename: str) -> bool:
    """
    Creates a file with the given name, writes a simple shell script content to it,
    and makes it executable for the owner.

    Args:
        filename: The name of the file to create.

    Returns:
        True if the file was created and made executable successfully, False otherwise.
    """
    try:
        # A simple, safe script content.
        content = (
            "#!/bin/bash\n"
            "# A simple script generated by a Python program.\n"
            "echo \"Hello from script.sh! Execution successful.\"\n"
        )
        
        # Create and write to the file (mode 'w' overwrites if it exists).
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Get current permissions.
        current_permissions = os.stat(filename).st_mode
        
        # Add execute permission for the owner (S_IXUSR).
        os.chmod(filename, current_permissions | stat.S_IXUSR)
        
        return True
    except (IOError, OSError) as e:
        print(f"An error occurred: {e}", file=os.sys.stderr)
        return False

def run_test(filename, test_name):
    """Helper function to run a test case."""
    print(f"\n{test_name}")
    if create_and_make_executable(filename):
        print(f"-> Success: Created and made '{filename}' executable.")
        # Verification
        if os.path.exists(filename) and os.access(filename, os.X_OK):
            print("-> Verification: File is executable.")
        else:
            print("-> Verification: File is NOT executable or does not exist.")
    else:
        print(f"-> Failure: Could not create and make '{filename}' executable.")

def main():
    """Main function with 5 test cases."""
    filename = "script.sh"
    print("--- Python Test Cases ---")
    
    # Test Case 1: Initial creation
    run_test(filename, f"Test Case 1: Initial creation of {filename}")

    # Test Case 2: Overwriting the existing file
    run_test(filename, f"Test Case 2: Overwriting {filename}")

    # Test Case 3: Deleting the file to test re-creation
    print("\nTest Case 3: Deleting the file")
    try:
        os.remove(filename)
        print(f"-> Success: File '{filename}' deleted.")
    except OSError as e:
        print(f"-> Failure: Could not delete file: {e}", file=os.sys.stderr)

    # Test Case 4: Re-creating the file after deletion
    run_test(filename, f"Test Case 4: Re-creating the file {filename}")

    # Test Case 5: Final cleanup
    print("\nTest Case 5: Final cleanup")
    try:
        if os.path.exists(filename):
            os.remove(filename)
            print("-> Success: Cleanup complete.")
    except OSError as e:
        print(f"-> Failure: Cleanup failed: {e}", file=os.sys.stderr)

if __name__ == "__main__":
    main()