# You must install the bcrypt library first:
# pip install bcrypt

import bcrypt
import os

# In-memory dictionary to simulate a database
# The value stored is the full hash generated by bcrypt, which includes the salt.
user_database = {}

def update_user_password(username, new_password):
    """
    Accepts username and a new password, hashes the password, and updates the database.

    Args:
        username (str): The user's username.
        new_password (str): The user's new password.
    
    Returns:
        bool: True if the update was successful, False otherwise.
    """
    if not isinstance(username, str) or not username.strip():
        print("Error: Username must be a non-empty string.")
        return False
    if not isinstance(new_password, str) or not new_password:
        print("Error: New password must be a non-empty string.")
        return False
        
    if username not in user_database:
        print(f"Error: User '{username}' not found.")
        return False
    
    try:
        # bcrypt requires the password to be in bytes
        password_bytes = new_password.encode('utf-8')
        
        # Generate a salt and hash the password. The salt is embedded in the hash.
        hashed_password = bcrypt.hashpw(password_bytes, bcrypt.gensalt(rounds=12))
        
        # Store the hash (as a string) in the database
        user_database[username] = hashed_password.decode('utf-8')
        
        print(f"Password for user '{username}' has been updated successfully.")
        return True
    except Exception as e:
        print(f"An error occurred while updating password for '{username}': {e}")
        return False

def main():
    """Main function to run test cases."""
    # Initialize the 'database' with some users
    global user_database
    user_database = {
        "alice": "initial_placeholder_hash",
        "bob": "initial_placeholder_hash",
        "charlie": "initial_placeholder_hash",
        "david": "initial_placeholder_hash",
        "eve": "initial_placeholder_hash"
    }

    print("--- Initial Database State ---")
    for user, pwd_hash in user_database.items():
        print(f"User: {user}, Stored: {pwd_hash}")
        
    print("\n--- Running 5 Test Cases for Password Update ---")

    # Test Case 1: Update alice's password
    update_user_password("alice", "P@ssword123!")
    
    # Test Case 2: Update bob's password
    update_user_password("bob", "SecurePwd!#$987")
    
    # Test Case 3: Update a non-existent user
    update_user_password("frank", "somePassword")
    
    # Test Case 4: Update charlie's password
    update_user_password("charlie", "another-strong-password-4-charlie")
    
    # Test Case 5: Update with an empty password
    update_user_password("david", "")

    print("\n--- Final Database State ---")
    for user, pwd_hash in user_database.items():
        print(f"User: {user}, Stored: {pwd_hash}")

if __name__ == "__main__":
    main()